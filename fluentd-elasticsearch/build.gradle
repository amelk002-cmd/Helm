/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

import org.unbrokendome.gradle.plugins.helm.command.tasks.*

plugins {
    id "base"
    id "org.unbroken-dome.helm" version "1.5.0"
    id 'org.unbroken-dome.helm-commands' version '1.5.0'
    id 'org.unbroken-dome.helm-releases' version '1.5.0'
}
 
 repositories {
	mavenCentral()
}

/**
  Variable declarations
**/
ext {
    chartIdentifier = "fluentd-elasticsearch"
    chartVer = "11.7.2"
    relName = "fluentd-elasticsearch"
	buildEnv = project.hasProperty('buildEnv') ? project.findProperty('buildEnv') : "local"
    setUp = project.hasProperty('setUp') ? project.findProperty('setUp') : "cloud"
	helmHome = System.getenv('HELM_HOME')
    helmHost = System.getenv('HELM_HOST')
    tagName = System.getenv('TAG_NAME') ?: "latest"
    chartVer = tagName
    esIPAddress = System.getenv('ES_IP_ADDRESS')?: "default"
    esHostName = System.getenv('ES_HOST')?: "default"
    esPassword = System.getenv('ES_PASSWORD') ?: "default"
    esPort = System.getenv('ES_PORT') ?: "9243"
    nameSpace = System.getenv('NAMESPACE') ?: "default"
    esHostSchema = "http"
    if(buildEnv == "local") {
      chartVer = "11.7.2" // In local we use a constant value as build version.
    }
	if(buildEnv == "local"){
	  authEnabled = false
	} else {
	  authEnabled = true
      esHostSchema = "https"
	}
    
}

/**
 Printing Environment variables
**/
def printenv = tasks.register("printenv") {
    group = 'printing'
    description = 'Printing Env'

    doLast {
        println 'BUILD_ENV '+ buildEnv
		println 'ES_HOST '+ esHostName
        println 'HELM_HOME '+helmHome
        println 'HELM_HOST '+helmHost
        println 'NAMESPACE '+nameSpace
    }
}

/**
 Helm package config and creation
**/
helm {
    home = file(helmHome)
    host = helmHost
    filtering {
        values.put 'buildEnv', buildEnv
        values.put 'setUp', setUp
        values.put 'nameSpace', nameSpace
        values.put 'authEnabled', authEnabled
        values.put 'elasticSearchHostName', esHostName
        values.put 'elasticSearchPassword', esPassword
        values.put 'elasticSearchPort', esPort
        values.put 'elasticSearchHostSchema', esHostSchema
        values.put 'elasticSearchIPAddress', esIPAddress
    }
    charts {
        fluentd {
            chartName = chartIdentifier
            chartVersion = chartVer
            sourceDir = file(chartIdentifier)
        }
    }
}

/**
  Fluentd Deamonset installation to kubernetes
**/
def fluentdInstall = tasks.register("fluentdInstall") {
    group = 'cmks'
    description = 'Build and Install Fluentd Monitoring to kubernetes'
    dependsOn tasks.prepareFluentd, tasks.build,  tasks.printenv
	tasks.findByName('prepareFluentd').mustRunAfter 'build'
    tasks.findByName('build').mustRunAfter 'printenv'
    doLast {
    println "Finished"
    }
}

task prepareFluentd(type: HelmUpgrade) {
    install = true
    namespace = nameSpace
    chart = buildDir.path+'/helm/charts/'+chartIdentifier
    version = chartVer
    releaseName = relName
}

def fluentdUnInstall = tasks.register("fluentdUnInstall") {
    group = 'cmks'
    description = 'Uninstall fluentd Module from kubernetes'
    dependsOn tasks.unInstall
    doLast {
    println "Finished"
    }
}

/**
  Fluentd Deamonset uninstallation from kubernetes
**/
task unInstall(type: HelmDelete) {
    purge = true
    releaseName = relName
}