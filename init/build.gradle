/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
import org.unbrokendome.gradle.plugins.helm.command.tasks.*

plugins {
    id "base"
    id "org.unbroken-dome.helm" version "1.5.0"
    id 'org.unbroken-dome.helm-commands' version '1.5.0'
    id 'org.unbroken-dome.helm-releases' version '1.5.0'
}

repositories {
    mavenCentral()
}

/**
 Variable declarations
 **/
ext {
   
    cacheRelName = "cache"
    persistRelName = "persist"
    
    
    tagName = System.getenv('TAG_NAME') ?: "latest"
    redisChartVer = tagName
    
    buildEnv = project.hasProperty('buildEnv') ? project.findProperty('buildEnv') : "local"
    setUp = project.hasProperty('setUp') ? project.findProperty('setUp') : "cloud"
    helmHome = System.getenv('HELM_HOME')
    helmHost = System.getenv('HELM_HOST')
    nameSpace = System.getenv('NAMESPACE') ?: "default"
    
    hostName = System.getenv('HOST_NAME')?: "kmstest.local"

    if(buildEnv == "local"){
        redisChartVer = "3.6.1"
        
    }
    
}

/**
 Printing Environment variables
 **/
def printenv = tasks.register("printenv") {
    group = 'printing'
    description = 'Printing Env'

    doLast {
        println 'BUILD_ENV '+ buildEnv
        println 'SET_UP '+ setUp
        println 'HELM_HOME '+helmHome
        println 'HELM_HOST '+helmHost
        println 'NAMESPACE '+nameSpace
        println 'TAG_NAME '+tagName
        println 'INGRESS_ENV '+ingressEnv
        println 'HOST_NAME '+hostName
    }
}

/**
 Helm package config and creation
 **/
helm {
    home = file(helmHome)
    host = helmHost
    filtering {
        values.put 'buildEnv', buildEnv
        values.put 'setUp', setUp
        values.put 'targetPort', portNumber
        values.put 'nameSpace', nameSpace
        values.put 'ingressEnv', ingressEnv
        values.put 'hostName',  hostName
        
    }
    charts {
        redisCache {
            chartName = "redis-ha-cache"
            chartVersion = redisChartVer
            sourceDir = file('redis-ha-cache')
        }
        redisPersist {
            chartName = "redis-ha-persist"
            chartVersion = redisChartVer
            sourceDir = file('redis-ha-persist')
        }
      
    }
}

task prepareRedisCache(type: HelmUpgrade) {
    install = true
    namespace = nameSpace
    chart = buildDir.path+'/helm/charts/redis-ha-cache'
    version = redisChartVer
    releaseName = cacheRelName
    // wait = true - Enable if we need to wait until the dependencies get installed
}

task prepareRedisPersist(type: HelmUpgrade) {
    install = true
    namespace = nameSpace
    chart = buildDir.path+'/helm/charts/redis-ha-persist'
    version = redisChartVer
    releaseName = persistRelName
    // wait = true - Enable if we need to wait until the dependencies get installed
}

/**
 Redis installation to kubernetes
 **/
def redisInstall = tasks.register("redisInstall") {
    group = 'cmks'
    description = 'Build and Install redis to kubernetes cluster'
    dependsOn tasks.prepareRedisCache, tasks.prepareRedisPersist, tasks.build,  tasks.printenv
    tasks.findByName('prepareRedisPersist').mustRunAfter 'prepareRedisCache'
    tasks.findByName('prepareRedisCache').mustRunAfter 'build'
    tasks.findByName('build').mustRunAfter 'printenv'
    doLast {
        println "Finished"
    }
}



task cacheUnInstall(type: HelmDelete) {
    purge = true
    releaseName = cacheRelName
}
task persistUnInstall(type: HelmDelete) {
    purge = true
    releaseName = persistRelName
}


/**
 Redis uninstallation from kubernetes
 **/
def redisUnInstall = tasks.register("redisUnInstall") {
    group = 'cmks'
    description = 'Uninstall redis from kubernetes'
    dependsOn tasks.cacheUnInstall, tasks.persistUnInstall
    doLast {
        println "Finished"
    }
}

